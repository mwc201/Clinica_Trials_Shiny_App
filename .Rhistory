NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2019){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
write(lst_fnames, "data/lst_fnames.txt")
path = "https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/all_dfs.RDS"
download.file(path,"./bail_out/all_dfs.RDS", method="curl")
path = "https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/df_tot.RDS"
download.file(path,"./bail_out/df_tot.RDS", method="curl")
get_url <- function(year, quarter){
url = paste0(
"https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/",
year, "-", quarter,
".csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2019){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
write(lst_fnames, "data/lst_fnames.txt")
path = "https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/all_dfs.RDS"
download.file(path,"./bail_out/all_dfs.RDS", method="curl")
path = "https://nycdsastudent.s3.us-east-2.amazonaws.com/MidtermRDA/df_tot.RDS"
download.file(path,"./bail_out/df_tot.RDS", method="curl")
shiny::runApp('Desktop/Shiny_Project')
library(shinydashboard)
library(leaflet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(leaflet)
library(DT)
library(lubridate)
library(googleVis)
library(stringr)
runApp('Desktop/Shiny_Project')
df <- tbl_df(trials) %>%
select( Status = Status,
Interventions = Interventions,
Sponsor = Sponsor.Collaborators,
Phases = Phases,
Enrollment = Enrollment,
Study.Type = Study.Type,
Funded.Bys = Funded.Bys,
Study.Designs = Study.Designs)
df <- cbind(df, Duration = trial_duration)
df <- cbind(df, location)
df$Study.Type <- ifelse(df$Study.Type == "Interventional", "Clinical Trials", "Observational")
#Length of clinical trials by finding the difference between start and completion date
modified_start = parse_date_time(trials$Start.Date, orders = c('mY','mdY'))
modified_completion = parse_date_time(trials$Completion.Date, orders = c('mY', 'mdY'))
trial_duration = interval(modified_start, modified_completion) %/% months(1)
df$Interventions <- str_extract(df$Interventions, regex('[A-Za-z]+(?=(,|\\b))'))
df$Phases <- sub("Not Applicable", "", df$Phases)
df$Phases <- sub("Early ", "", df$Phases)
df$Phases[df$Phases==""]<-NA
runApp('Desktop/Shiny_Project')
trials <- read.csv('Cardio_studies.csv',
header = TRUE,
stringsAsFactors = FALSE)
location <- read.csv("final.csv",
header = TRUE,)
#input choice on UI
choice_study_info = c("Sponsor Type", "Enrollment", "Intervention Type", "Status", "Phase", "Duration")
#DF for table output
df_duration = df %>%
filter(., !is.na(Duration)) %>%
group_by(., Sponsor) %>%
summarise(.,
Avg.Duration = round(mean(Duration), 1),
Min.Duration = round(min(Duration), 1),
Max.Duration = round(max(Duration), 1))
enrollment_df <- df %>% group_by(., Sponsor) %>%
filter(., !is.na(Enrollment)) %>%
summarise(.,
#Total.Studies =  ??
Total_Enrollment = sum(Enrollment),
Avg.Enrollment = round(mean(Enrollment), 0),
Min.Enrollment = min(Enrollment),
Max.Enrollment = max(Enrollment))
tot_studies <- df %>%
group_by(., Sponsor) %>%
summarise(., Total_Studies = n())
df_1 = inner_join(tot_studies, enrollment_df, by = "Sponsor")
df_2 = inner_join(df_1, df_duration, by = "Sponsor")
df_duration = df %>%
filter(., !is.na(Duration)) %>%
group_by(., Sponsor) %>%
summarise(.,
Avg.Duration = round(mean(Duration), 1),
Min.Duration = round(min(Duration), 1),
Max.Duration = round(max(Duration), 1))
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
View(df)
modified_start = parse_date_time(trials$Start.Date, orders = c('mY','mdY'))
modified_completion = parse_date_time(trials$Completion.Date, orders = c('mY', 'mdY'))
trial_duration = interval(modified_start, modified_completion) %/% months(1)
runApp('Desktop/Shiny_Project')
View(trials)
runApp('Desktop/Shiny_Project')
library(shinydashboard)
library(leaflet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(leaflet)
library(DT)
library(lubridate)
library(googleVis)
library(stringr)
df_duration = df %>%
filter(., !is.na(Duration)) %>%
group_by(., Sponsor) %>%
summarise(.,
Avg.Duration = round(mean(Duration), 1),
Min.Duration = round(min(Duration), 1),
Max.Duration = round(max(Duration), 1))
View(tot_studies)
head(trial_duration)
df_1 = inner_join(tot_studies, enrollment_df, by = "Sponsor")
df_2 = inner_join(df_1, df_duration, by = "Sponsor")
df_1 = inner_join(tot_studies, enrollment_df, by = "Sponsor")
df_2 = inner_join(df_1, df_duration, by = "Sponsor")
df <- cbind(df, Duration = trial_duration)
View(df)
runApp('Desktop/Shiny_Project')
df$Study.Type <- ifelse(df$Study.Type == "Interventional", "Interventional", "Observational")
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
?geom_text
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
?ylab
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
df <- tbl_df(trials) %>%
select( Status = Status,
Interventions = Interventions,
Sponsor.Type = Sponsor.Collaborators,
Phases = Phases,
Enrollment = Enrollment,
Study.Type = Study.Type,
Sponsor = Funded.Bys,
)
df <- tbl_df(trials) %>%
select( Status = Status,
Interventions = Interventions,
Sponsor.Type = Sponsor.Collaborators,
Phases = Phases,
Enrollment = Enrollment,
Study.Type = Study.Type,
Sponsor = Funded.Bys,
Study.Designs = Study.Designs)
df <- cbind(df, Duration = trial_duration)
df <- cbind(df, location)
df$Study.Type <- ifelse(df$Study.Type == "Interventional", "Interventional", "Observational")
modified_start = parse_date_time(trials$Start.Date, orders = c('mY','mdY'))
modified_completion = parse_date_time(trials$Completion.Date, orders = c('mY', 'mdY'))
trial_duration = interval(modified_start, modified_completion) %/% months(1)
df$Interventions <- str_extract(df$Interventions, regex('[A-Za-z]+(?=(,|\\b))'))
df$Phases <- sub("Not Applicable", "", df$Phases)
df$Phases <- sub("Early ", "", df$Phases)
df$Phases[df$Phases==""]<-NA
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
unique(df$Status)
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
View(df)
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
df <- tbl_df(trials) %>%
select( Status = Status,
Interventions = Interventions,
Sponsor.Type = Sponsor.Collaborators,
Phases = Phases,
Enrollment = Enrollment,
Study.Type = Study.Type,
Sponsor = Funded.Bys,
Study.Designs = Study.Designs)
df <- cbind(df, Duration = trial_duration)
df <- cbind(df, location)
df$Study.Type <- ifelse(df$Study.Type == "Interventional", "Interventional", "Observational")
#Length of clinical trials by finding the difference between start and completion date
modified_start = parse_date_time(trials$Start.Date, orders = c('mY','mdY'))
modified_completion = parse_date_time(trials$Completion.Date, orders = c('mY', 'mdY'))
trial_duration = interval(modified_start, modified_completion) %/% months(1)
df$Interventions <- str_extract(df$Interventions, regex('[A-Za-z]+(?=(,|\\b))'))
df$Phases <- sub("Not Applicable", "", df$Phases)
df$Phases <- sub("Early ", "", df$Phases)
df$Phases[df$Phases==""]<-NA
library(shinydashboard)
library(leaflet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(leaflet)
library(DT)
library(lubridate)
library(googleVis)
library(stringr)
library(plotly)
trials <- read.csv('Cardio_studies.csv',
header = TRUE,
stringsAsFactors = FALSE)
location <- read.csv("final.csv",
header = TRUE,)
#input choice on UI
choice_study_info = c("Sponsor Type", "Age", "Intervention Type", "Patient Status", "Clinical Phase")
choice_explore_info = c("Enrollment", "Duration")
#DF for table output
df_duration = df %>%
filter(., !is.na(Duration)) %>%
group_by(., Sponsor.Type) %>%
summarise(.,
Avg.Duration = round(mean(Duration), 1),
Min.Duration = round(min(Duration), 1),
Max.Duration = round(max(Duration), 1))
enrollment_df <- df %>% group_by(., Sponsor.Type) %>%
filter(., !is.na(Enrollment)) %>%
summarise(.,
#Total.Studies =  ??
Total_Enrollment = sum(Enrollment),
Avg.Enrollment = round(mean(Enrollment), 0),
Min.Enrollment = min(Enrollment),
Max.Enrollment = max(Enrollment))
tot_studies <- df %>%
group_by(., Sponsor.Type) %>%
summarise(., Total_Studies = n())
df_1 = inner_join(tot_studies, enrollment_df, by = "Sponsor.Type")
df_2 = inner_join(df_1, df_duration, by = "Sponsor.Type")
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
View(df)
df %>%
group_by(., Sponsor, Study.Type) %>%
summarise(., num_trials = n())
inner_join(df, num_trials, c("Sponsor","Study.Type"))
num_trials = df %>%
group_by(., Sponsor, Study.Type) %>%
summarise(., num_trials = n())
inner_join(df, num_trials, c("Sponsor","Study.Type"))
df_sponsor = inner_join(df, num_trials, c("Sponsor","Study.Type"))
View(df_sponsor)
View(df_sponsor)
g <- ggplot(data = df_sponsor, reorder(aes(x = `Sponsor`)))
g + geom_bar(aes(fill = Sponsor), state = "identity") +
geom_text(stat = 'count', aes(label = num_trials), size=3.5, vjust=-.5)
theme(axis.text.x = element_text(angle = 45,hjust = 1)) +
labs(title="Number of Studies By Sponsor") +
facet_wrap( ~ Study.Type)
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
g <- ggplot(data = df, reorder(aes(x = `Sponsor`)))
g + geom_bar(aes(fill = Sponsor), state = "identity") +
#geom_text(stat = 'count', aes(label = num_trials), size=3.5, vjust=-.5)
theme(axis.text.x = element_text(angle = 45,hjust = 1)) +
labs(title="Number of Studies By Sponsor") +
facet_wrap( ~ Study.Type)
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
head(num_trials)
factor(df$Sponsor,
levels = c("US Fed", "NIH", "Industry", "Other"))
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
View(num_trials)
runApp('Desktop/Shiny_Project')
View(num_trials)
runApp('Desktop/Shiny_Project')
View(num_trials)
num_trials = df %>%
group_by(., Study.Type, Interventions) %>%
summarise(., num_trials = n())
df_intervention = inner_join(df, num_trials, c("Study.Type","Interventions"))
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
View(num_trials)
runApp('Desktop/Shiny_Project')
temp <- df %>% group_by(.,Study.Type, Enrollment) %>%
count()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
ggplotly(p)
p <- ggplot(data = df,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 1000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
f <- ggplotly(p)
f <- ggplotly(p)
f
ggplotly(p)
ggplotly(p)
p <- ggplot(data = df,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 2000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
ggplotly(p)
temp <- df %>% group_by(.,Study.Type, Enrollment) %>%
count()
p <- ggplot(data = temp,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 2000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
ggplotly(p)
p <- ggplot(data = temp,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 700)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
ggplotly(p)
p <- ggplot(data = temp,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 1000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
ggplotly(p)
p <- ggplot(data = temp,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 5000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number")
ggplotly(p)
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
temp2 <- df %>% group_by(.,Study.Type, Duration) %>%
count()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
ggplotly(ggplot(data = temp,
mapping = aes(x = Study.Type, y = Enrollment, fill = Study.Type)) +
geom_boxplot(outlier.color = NA, na.rm = TRUE) +
coord_cartesian(ylim = c(0, 5000)) +
labs(title = "Enrollment By Study Type") +
xlab("Study Type") +
ylab("Enrollment Number"))
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
?ggplotly
runApp('Desktop/Shiny_Project')
runApp()
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
?renderPlotly
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
unique(df$Sponsor)
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp()
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
install.packages("shinythemes")
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
choice_study_info = c("Intervention Type", "Patient Status", "Clinical Phase", "Sponsor Type")
choice_explore_info = c("Enrollment", "Duration")
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
shiny::runApp('Desktop/Shiny_Project')
runApp('Desktop/Shiny_Project')
setwd("~/Desktop/Project 1")
shiny::runApp()
